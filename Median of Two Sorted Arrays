class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length){
            findMedianSortedArrays(nums2,nums1);
        }
        int x = nums1.length;
        int y = nums2.length;
        int low = 0;
        int high = x;
        while(low <= high){
            int splitX = (low + high) / 2;
            int splitY = (x + y + 1) / 2 - splitX;

            int maxLeftX = (splitX == 0) ? Integer.MIN_VALUE : nums1[splitX - 1];
            int minRightX = (splitX == x) ? Integer.MAX_VALUE : nums1[splitX];
            int maxLeftY = (splitY == 0) ? Integer.MIN_VALUE : nums2[splitY - 1];
            int minRightY = (splitY == y) ? Integer.MAX_VALUE : nums2[splitY];

            if(maxLeftX <= minRightY && maxLeftY <= minRightX){
                if((x+y) % 2 == 0){
                    return (double)((Math.max(maxLeftX,maxLeftY) + Math.max(minRightX,minRightY)) / 2);
                } else {
                    return (double)Math.max(maxLeftX,maxLeftY);
                }
            } else if (maxLeftX > minRightY){
                high = splitX - 1;
            } else if (maxLeftY > minRightX){
                low = splitX + 1;
            }
        }
        throw new IllegalArgumentException();
    }
}
